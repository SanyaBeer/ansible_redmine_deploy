---
- name: Create .ssh directory if it does not exist
  file:
    path: "./.ssh"
    state: directory
    mode: '0755'

- name: Generate an OpenSSH keypair
  community.crypto.openssh_keypair:
    path: "./.ssh/do_id_rsa"
    state: present
    force: no
  register: newSSHKeys

- debug:
    msg: "{{ do_token }}"

- name: Deploy DO infrastructure
  community.general.terraform:
    project_path: terraform/loadbalance/
    state: absent
    backend_config:
      hostname: app.terraform.io
      organization: aj_pivovarov
      workspaces:
        name: do_redmine
    variables:
      do_token: "{{ do_token }}"
      ssh_key_name: "{{ ssh_key_name }}"
      pvt_key: "{{ pvt_key }}"
      pub_key: "{{ pub_key }}"
      app_tag: "{{ app_tag }}"
      app_region: "{{ app_region }}"
      droplet_image: "{{ droplet_image }}"
      droplet_prefix: "{{ droplet_prefix }}"
      droplet_count: "{{ droplet_count }}"
      droplet_tag: "{{ droplet_tag }}"
      droplet_region: "{{ droplet_region }}"
      droplet_size: "{{ droplet_size }}"
      droplet_connection_user: "{{ droplet_connection_user }}"
      db_cluster_name: "{{ db_cluster_name }}"
      db_cluster_engine: "{{ db_cluster_engine }}"
      db_cluster_version: "{{ db_cluster_version }}"
      db_cluster_size: "{{ db_cluster_size }}"
      db_cluster_region: "{{ db_cluster_region }}"
      db_cluster_node_count: "{{ db_cluster_node_count }}"
      db_name: "{{ db_name }}"
      db_user: "{{ db_user }}"
  register: do_stats

- name: Get terraform output droplets_ips
  shell:
    cmd: terraform output --json droplets_ips
    chdir: terraform/loadbalance
  register: droplets_cmd

- name: Get terraform output db_settings
  shell:
    cmd: terraform output --json db_settings
    chdir: terraform/loadbalance
  register: settings_cmd

- name: Write to inventory file
  lineinfile:
    path: hosts
    regexp: "{{ item }}"
    line: "{{ item }}"
    insertafter: "[webservers]"
  with_items: "{{ droplets_cmd.stdout | from_json }}"

- name: Refresh inventory
  meta: refresh_inventory

- name: Create DB variables
  set_fact:
    db_host:          "{{ (settings_cmd.stdout | from_json).host }}"
    db_port:          "{{ (settings_cmd.stdout | from_json).port }}"
    db_database_name: "{{ (settings_cmd.stdout | from_json).db_name }}"
    db_user:          "{{ (settings_cmd.stdout | from_json).user }}"
    db_password:      "{{ (settings_cmd.stdout | from_json).password }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ droplets_cmd.stdout | from_json }}"
  run_once: yes
